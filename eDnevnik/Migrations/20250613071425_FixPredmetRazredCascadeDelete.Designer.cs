// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eDnevnik.Data;

#nullable disable

namespace eDnevnik.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613071425_FixPredmetRazredCascadeDelete")]
    partial class FixPredmetRazredCascadeDelete
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.Aktivnost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aktivna")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("NastavnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PredmetId")
                        .HasColumnType("int");

                    b.Property<int>("Prioritet")
                        .HasColumnType("int");

                    b.Property<int?>("RazredId")
                        .HasColumnType("int");

                    b.Property<int>("Tip")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NastavnikId");

                    b.HasIndex("PredmetId");

                    b.HasIndex("RazredId");

                    b.ToTable("Aktivnost");
                });

            modelBuilder.Entity("eDnevnik.Models.Cas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DanUSedmici")
                        .HasColumnType("int");

                    b.Property<int?>("FixniTerminId")
                        .HasColumnType("int");

                    b.Property<string>("NastavnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PredmetId")
                        .HasColumnType("int");

                    b.Property<int>("RazredId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Termin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FixniTerminId");

                    b.HasIndex("NastavnikId");

                    b.HasIndex("PredmetId");

                    b.HasIndex("RazredId");

                    b.ToTable("Cas", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.EvidencijaCasa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Aktivnosti")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CasId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumOdrzavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Napomene")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NastavnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Odrzan")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VrijemeEvidentiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CasId");

                    b.HasIndex("NastavnikId");

                    b.ToTable("EvidencijaCasa");
                });

            modelBuilder.Entity("eDnevnik.Models.FixniTermin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("JeOdmor")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("KrajVremena")
                        .HasColumnType("time");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("PocetakVremena")
                        .HasColumnType("time");

                    b.Property<int>("Redoslijed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FixniTermini");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 8, 45, 0, 0),
                            Naziv = "1. čas",
                            PocetakVremena = new TimeSpan(0, 8, 0, 0, 0),
                            Redoslijed = 1
                        },
                        new
                        {
                            Id = 2,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 9, 35, 0, 0),
                            Naziv = "2. čas",
                            PocetakVremena = new TimeSpan(0, 8, 50, 0, 0),
                            Redoslijed = 2
                        },
                        new
                        {
                            Id = 3,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 10, 25, 0, 0),
                            Naziv = "3. čas",
                            PocetakVremena = new TimeSpan(0, 9, 40, 0, 0),
                            Redoslijed = 3
                        },
                        new
                        {
                            Id = 100,
                            JeOdmor = true,
                            KrajVremena = new TimeSpan(0, 10, 45, 0, 0),
                            Naziv = "Veliki odmor",
                            PocetakVremena = new TimeSpan(0, 10, 25, 0, 0),
                            Redoslijed = 4
                        },
                        new
                        {
                            Id = 4,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 11, 30, 0, 0),
                            Naziv = "4. čas",
                            PocetakVremena = new TimeSpan(0, 10, 45, 0, 0),
                            Redoslijed = 5
                        },
                        new
                        {
                            Id = 5,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 12, 20, 0, 0),
                            Naziv = "5. čas",
                            PocetakVremena = new TimeSpan(0, 11, 35, 0, 0),
                            Redoslijed = 6
                        },
                        new
                        {
                            Id = 6,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 13, 10, 0, 0),
                            Naziv = "6. čas",
                            PocetakVremena = new TimeSpan(0, 12, 25, 0, 0),
                            Redoslijed = 7
                        },
                        new
                        {
                            Id = 101,
                            JeOdmor = true,
                            KrajVremena = new TimeSpan(0, 13, 30, 0, 0),
                            Naziv = "Veliki odmor",
                            PocetakVremena = new TimeSpan(0, 13, 10, 0, 0),
                            Redoslijed = 8
                        },
                        new
                        {
                            Id = 7,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 14, 15, 0, 0),
                            Naziv = "7. čas",
                            PocetakVremena = new TimeSpan(0, 13, 30, 0, 0),
                            Redoslijed = 9
                        },
                        new
                        {
                            Id = 8,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 15, 5, 0, 0),
                            Naziv = "8. čas",
                            PocetakVremena = new TimeSpan(0, 14, 20, 0, 0),
                            Redoslijed = 10
                        },
                        new
                        {
                            Id = 9,
                            JeOdmor = false,
                            KrajVremena = new TimeSpan(0, 15, 55, 0, 0),
                            Naziv = "9. čas",
                            PocetakVremena = new TimeSpan(0, 15, 10, 0, 0),
                            Redoslijed = 11
                        });
                });

            modelBuilder.Entity("eDnevnik.Models.Izostanak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CasId")
                        .HasColumnType("int");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UcenikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CasId");

                    b.HasIndex("UcenikId");

                    b.ToTable("Izostanak", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adresa")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RazredId")
                        .HasColumnType("int");

                    b.Property<string>("RoditeljId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Vladanje")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RazredId");

                    b.HasIndex("RoditeljId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.ObavjestenjeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AktivnostId")
                        .HasColumnType("int");

                    b.Property<int>("BrojPokušaja")
                        .HasColumnType("int");

                    b.Property<string>("EmailAdresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Greska")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SadržajEmaila")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeSlanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("VrijemeSlijedecegPokušaja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AktivnostId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("ObavjestenjeLog");
                });

            modelBuilder.Entity("eDnevnik.Models.Ocjena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Komentar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PredmetId")
                        .HasColumnType("int");

                    b.Property<string>("UcenikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Vrijednost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredmetId");

                    b.HasIndex("UcenikId");

                    b.ToTable("Ocjena", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.Poruka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PosiljalacId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrimalacId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeSlanja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PosiljalacId");

                    b.HasIndex("PrimalacId");

                    b.ToTable("Poruka");
                });

            modelBuilder.Entity("eDnevnik.Models.Predmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NastavnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("NastavnikId");

                    b.ToTable("Predmet", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.PredmetRazred", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PredmetId")
                        .HasColumnType("int");

                    b.Property<int>("RazredId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredmetId");

                    b.HasIndex("RazredId");

                    b.ToTable("PredmetRazred");
                });

            modelBuilder.Entity("eDnevnik.Models.Razred", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NastavnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("NastavnikId");

                    b.ToTable("Razred", (string)null);
                });

            modelBuilder.Entity("eDnevnik.Models.UcenikPredmet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PredmetId")
                        .HasColumnType("int");

                    b.Property<string>("UcenikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PredmetId");

                    b.HasIndex("UcenikId");

                    b.ToTable("RazredPredmet", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eDnevnik.Models.Aktivnost", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eDnevnik.Models.Razred", "Razred")
                        .WithMany()
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Nastavnik");

                    b.Navigation("Predmet");

                    b.Navigation("Razred");
                });

            modelBuilder.Entity("eDnevnik.Models.Cas", b =>
                {
                    b.HasOne("eDnevnik.Models.FixniTermin", "FixniTermin")
                        .WithMany()
                        .HasForeignKey("FixniTerminId");

                    b.HasOne("eDnevnik.Models.Korisnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Razred", "Razred")
                        .WithMany()
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FixniTermin");

                    b.Navigation("Nastavnik");

                    b.Navigation("Predmet");

                    b.Navigation("Razred");
                });

            modelBuilder.Entity("eDnevnik.Models.EvidencijaCasa", b =>
                {
                    b.HasOne("eDnevnik.Models.Cas", "Cas")
                        .WithMany()
                        .HasForeignKey("CasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cas");

                    b.Navigation("Nastavnik");
                });

            modelBuilder.Entity("eDnevnik.Models.Izostanak", b =>
                {
                    b.HasOne("eDnevnik.Models.Cas", "Cas")
                        .WithMany()
                        .HasForeignKey("CasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cas");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("eDnevnik.Models.Korisnik", b =>
                {
                    b.HasOne("eDnevnik.Models.Razred", "Razred")
                        .WithMany()
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("eDnevnik.Models.Korisnik", "Roditelj")
                        .WithMany()
                        .HasForeignKey("RoditeljId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Razred");

                    b.Navigation("Roditelj");
                });

            modelBuilder.Entity("eDnevnik.Models.ObavjestenjeLog", b =>
                {
                    b.HasOne("eDnevnik.Models.Aktivnost", "Aktivnost")
                        .WithMany()
                        .HasForeignKey("AktivnostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aktivnost");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eDnevnik.Models.Ocjena", b =>
                {
                    b.HasOne("eDnevnik.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Predmet");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("eDnevnik.Models.Poruka", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", "Posiljalac")
                        .WithMany()
                        .HasForeignKey("PosiljalacId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Primalac")
                        .WithMany()
                        .HasForeignKey("PrimalacId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Posiljalac");

                    b.Navigation("Primalac");
                });

            modelBuilder.Entity("eDnevnik.Models.Predmet", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nastavnik");
                });

            modelBuilder.Entity("eDnevnik.Models.PredmetRazred", b =>
                {
                    b.HasOne("eDnevnik.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Razred", "Razred")
                        .WithMany()
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predmet");

                    b.Navigation("Razred");
                });

            modelBuilder.Entity("eDnevnik.Models.Razred", b =>
                {
                    b.HasOne("eDnevnik.Models.Korisnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nastavnik");
                });

            modelBuilder.Entity("eDnevnik.Models.UcenikPredmet", b =>
                {
                    b.HasOne("eDnevnik.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("PredmetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eDnevnik.Models.Korisnik", "Ucenik")
                        .WithMany()
                        .HasForeignKey("UcenikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predmet");

                    b.Navigation("Ucenik");
                });
#pragma warning restore 612, 618
        }
    }
}
